plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
    id 'jacoco'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.liquibase.gradle' version '2.2.0'
    id 'com.adarshr.test-logger' version '3.0.0'
    id 'org.siouan.frontend-jdk11' version '6.0.0'
    id 'org.springdoc.openapi-gradle-plugin' version '1.6.0'
}

group = 'hexlet.code'
version = '1.0-SNAPSHOT'

application {
    mainClass = 'hexlet.code.AppApplication'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor (
            'org.projectlombok:lombok',
            'com.querydsl:querydsl-apt:5.0.0:jakarta',
            'jakarta.persistence:jakarta.persistence-api:3.1.0'
    )
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    implementation (
            'org.springframework.boot:spring-boot-starter-thymeleaf',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-validation',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-security',
            'io.jsonwebtoken:jjwt-api:0.11.5',
            'io.jsonwebtoken:jjwt-impl:0.11.5',
            'io.jsonwebtoken:jjwt-jackson:0.11.5',
            'org.liquibase:liquibase-core',
            'org.springframework.data:spring-data-jpa',
            'org.thymeleaf.extras:thymeleaf-extras-springsecurity6',
            'org.springframework.integration:spring-integration-core:6.0.3',
            'com.querydsl:querydsl-jpa:5.0.0:jakarta',
            'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0',
            'com.rollbar:rollbar-spring-boot3-webmvc:1.+'
    )

    liquibaseRuntime (
            'org.liquibase:liquibase-core',
            'info.picocli:picocli:4.7.1',
            'org.liquibase.ext:liquibase-hibernate5:3.6',
            sourceSets.main.output,

            'org.springframework.boot:spring-boot-starter-data-jpa',
            'com.h2database:h2'
    )

    runtimeOnly (
            'com.h2database:h2',
            'org.postgresql:postgresql'
    )

    testImplementation (
            'org.springframework.boot:spring-boot-starter-test',
            'org.springframework.security:spring-security-test',
            'com.github.database-rider:rider-junit5:1.36.0'
    )
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    systemProperty 'JWT_SECRET', "a2adf6c0bfab10eeee2c44bb6819addc22b36d49b0633388622787af5d3461bd"
    systemProperty 'ROLLBAR_TOKEN', "903e6c0ede76926b7e6cf"
}

wrapper {
    gradleVersion = '8.2'
    distributionType = Wrapper.DistributionType.ALL
}

compileJava {
    options.release = 20
    options.encoding = 'UTF-8'
}

checkstyle {
    toolVersion '10.12.1'
}

// Enable liquibase to be up to date with changes in the models
diffChangelog {
    dependsOn compileJava
}

// Generate test coverage reports in the xml format
jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}

// Keep the spring data jpa version up to date
dependencyManagement {
    imports {
        mavenBom 'org.springframework.data:spring-data-bom:2023.0.2'
    }
}

//liquibase {
//    activities {
//        main {
//            changelogFile 'src/main/resources/db/changelog/db.changelog-master.yaml'
//            url 'jdbc:h2:file:./task-manager-app-db'
//            referenceUrl 'hibernate:spring:hexlet.code.model.' +
//                    '?dialect=org.hibernate.dialect.H2Dialect' +
//                    '&hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy'
//        }
//    }
//}

openApi {
    apiDocsUrl.set("http://localhost:8080/v3/api-docs")
}

testlogger {
    showStandardStreams = true
}

run {
    systemProperty 'JWT_SECRET', "a2adf6c0bfab10eeee2c44bb6819addc22b36d49b0633388622787af5d3461bd"
    systemProperty 'ROLLBAR_TOKEN', "903e6c0ede76926b7e6cf"
}


// Сборка фронтенда.
// *****************************************************************************
frontend {
    nodeVersion = '16.13.1'
    installScript = 'install'
    assembleScript = 'run build'
    packageJsonDirectory = file("${projectDir}/frontend")
}

def configFrontendTasks = {
    inputs.files(fileTree("$projectDir/frontend").exclude('build', 'node_modules'))
    outputs.dir("$buildDir/resources/main/static")
}

assembleFrontend {
    configure configFrontendTasks

    doLast {
        copy {
            from "$projectDir/frontend/build"
            into "$buildDir/resources/main/static"
        }
    }
}

installFrontend {
    configure configFrontendTasks
}

processResources.dependsOn assembleFrontend
// *****************************************************************************
